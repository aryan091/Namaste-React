                                TESTING
Types of Testing ( Developer )
- Unit Testing - Developer test the component in Isolation - Single Component
- Integration Testing - Multiple Components 
- End to End Testing ( e2e Testing )  - Test all the flows

REACT TESTING LIBRARY  uses JEST

Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!

REACT TESTING LIBRARY - https://testing-library.com/docs/react-testing-library/intro/
JEST - https://jestjs.io/

Setting Up testing in our app
- Install React Testing Library
- Install Jest
- Install Babel Dependencies
- Configure Babel 
- Configure Parcel config file to disable default Babel Transpilation - https://parceljs.org/languages/javascript/#babel
- Jest Configuration - npx jest --init - https://jestjs.io/docs/getting-started
- Install JsDom Library - npm install --save-dev jest-environment-jsdom - https://testing-library.com/docs/react-testing-library/setup#jest-28
- Install npm i -D @babel/preset-react - Enabling JSX 
- Include @babel/preset-react inside my Babel configuration
- Install npm i -D @testing-library/jest-dom 
- import "@testing-library/jest-dom";

Parcel already uses `Babel` and it has its own configuration for Babel

So we will have a conflict with Parcel.So we will have to change parcel behavior

When you run - `npm run test`
if you will get that output - No tests found, exiting with code 1 

Congratulation you have successfully configured  React Testing Library - Jest - Babel - Parcel

JS-DOM - Jsdom is a JavaScript implementation of the WHATWG DOM and HTML standards, for use with Node.js. It provides a way to create and manipulate a virtual DOM in Node.js, which can be useful for testing, scraping, and other purposes.

Testing Environment


For writing test cases we have to first make a folder named '__tests__' in our app
__ = Dunder

It takes two Arguments - test(String , cb func)

Write our first Test Case

Write Sum.js in component folder

        Sum.js 

        export const sum = (a, b) => {
            return a + b;
        };

Write sum.test.js in component folder

        import { sum } from "../src/components/Sum";

        test("Sum function should caculate the sum of two numbers", () => {
        const result = sum(3, 4);

        //Assertion
        expect(result).toBe(7);
        });



PS D:\Namaste React\13- Time for Test> npm run test

> app-test@1.0.0 test
> jest

 PASS  __tests__/sum.test.js
  √ Sum function should caculate the sum of two numbers (3 ms)

----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |     100 |      100 |     100 |     100 |                   
 Sum.js   |     100 |      100 |     100 |     100 |                   
----------|---------|----------|---------|---------|-------------------
Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.083 s
Ran all test suites.

While testing React Components we will get below error

SyntaxError: D:\Namaste React\13- Time for Test\__tests__\Contact.test.js: Support for the experimental syntax 'jsx' isn't currently enabled

Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.

- Install npm i -D @babel/preset-react - Enabling JSX 
- Include @babel/preset-react inside my Babel configuration

module.exports = {
  presets: [
    ["@babel/preset-env", { targets: { node: "current" } }],
    ["@babel/preset-react", { runtime: "automatic" }],
  ],
};

This Line - ["@babel/preset-react", { runtime: "automatic" }],

Grouping of test case

describe("Contact Component", () => {

        test("should render", () => {
                
        })

         test("should render", () => {
                
        })
})

We can write `it` with `describe` instead of `test`

Lets test Header 
when this Header component start rendering we will get a error


  ● Should load Header Component
                                                   
    could not find react-redux context value; please ensure the component is wrapped in a <Provider>  

Beacause it don't know about Redux

So we will provide it with all the packages

 render(
        <BrowserRouter>
          <Provider store={appStore}>
            <Header />
          </Provider>
        </BrowserRouter>
      );

With Fire Event

it("Should change Login Button to Logout on click", () => {
  render(
    <BrowserRouter>
      <Provider store={appStore}>
        <Header />
      </Provider>
    </BrowserRouter>
  );

  const loginButton = screen.getByRole("button", { name: "Login" });

  fireEvent.click(loginButton);

  const logoutButton = screen.getByRole("button", { name: "Logout" });

  expect(logoutButton).toBeInTheDocument();
});

********************** Unit Testing is complete *****************************

                        Integration Testing

While rendering Body you will get this error
ReferenceError: fetch is not defined
Because fetch is a part of Browsers it didn't come with JS Dom so we have to give it a mock function

global.fetch = jest.fn(() => {
    return Promise.resolve({
      json: () => {
        return Promise.resolve(MOCK_DATA);
      },
    });
  });

So by giving a dummy fetch func it will work and give some error

    console.error
      Warning: An update to Body inside a test was not wrapped in act(...).

    ***********************
      When testing, code that causes React state updates should be wrapped into act(...):
    ***********************
      act(() => {
        /* fire events that update state */        
      });
      /* assert on the output */

      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act   

Wrap it with act()


// const cards = screen.getAllByTestId("resCard");

    // expect(cards.length).toBe(1)